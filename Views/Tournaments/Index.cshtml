@model IPagedList<EsportsCalendar.Models.Serie>

@{
    ViewData["Title"] = "Index";
}

<br />

<div class="row d-flex justify-content-center">
    <h1 class="text-center text-light w-100 display-3">Tournaments</h1>
    <p class="text-center text-light" style="font-size: 120%;">The biggest tournaments you should look out for in the nearest future!</p>
</div>

<br />
<div class="row d-flex flex-wrap">
    <div class="card-deck">
        @foreach (var tournament in Model)
        {
            <div class="col-md-6 col-lg-4 mb-5">
                <div class="card bg-light text-center d-flex justify-content-center h-100">


                    @{ var imgSrc = (String.IsNullOrWhiteSpace(tournament.League.ImageUrl)) ? @"images/ImgNotFound.png" : tournament.League.ImageUrl; }
                    <img class="card-img-top mt-1" style="height: 100px; object-fit: contain;" src="@imgSrc" />


                    <div class="card-body">
                        <h4 class="card-title">@tournament.League.Name @tournament.Name</h4>
                        <h6 class="card-subtitle text-muted">


                            @{var gameName = tournament.Videogame.Name == "LoL" ? "League of Legends" : tournament.Videogame.Name;}
                            <span>@gameName</span>


                        </h6>
                        <br />
                        <p class="card-text">@tournament.BeginAt.ToString("dd MMMM yyyy ", CultureInfo.CreateSpecificCulture("en-US")) - @tournament.EndAt.ToString("dd MMMM yyyy", CultureInfo.CreateSpecificCulture("en-US"))</p>
                    </div>
                    <div class="card-footer text-muted">


                        @{
                            var timeLeft = tournament.BeginAt - DateTime.Now;
                            var timeLeftMessage = timeLeft.Days == 0 ? "Begins Today!" : (timeLeft.Days == 1 ? "Begins in 1 day" : $"Begins in {timeLeft.Days} days");
                            if (timeLeft.Days >= 60)
                            {
                                timeLeftMessage = $"Begins in {timeLeft.Days / 30} months";
                            }
                        }
                        <span>@timeLeftMessage</span>


                    </div>
                </div>
            </div>
        }
    </div>
</div>
@Html.PagedListPager(Model, page => Url.Action("Index", new { game = ViewBag.Game, timePeriod = ViewBag.TimePeriod, page = page }),
new X.PagedList.Mvc.Common.PagedListRenderOptionsBase {
UlElementClasses = new string[] { " pagination justify-content-center" },
LiElementClasses = new string[] { "page-item" },
PageClasses = new string[] { "page-link text-dark" }
})